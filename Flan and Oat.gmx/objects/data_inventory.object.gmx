<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
global.curInvSelect = noone; 
global.pickup = noone;
global.itemDisplayList = ds_list_create(); //objects created by the inventory stored here
itemsCreated = false; 

//simplified version of textbox code, aligns text in real time
outputString = "";
lastSpace = 0;
strPos = 1;
strDisplay = "";

//placement -&gt; 0 = x coordinate, 1 = y coordinate
border_padding = 32;
box_padding = 16;

//main box
main_right_corner[0] = border_padding;
main_right_corner[1] = border_padding;
main_width = room_width * 2/3 - main_right_corner[0];
main_height = room_height * 0.75 - main_right_corner[1];
main_left_corner[0] = main_right_corner[0] + main_width;
main_left_corner[1] = main_right_corner[1] + main_height;
main_border_radius = 10;
main_to_side_padding = box_padding;
main_to_bottom_padding = box_padding;

//side box
side_right_corner[0] = main_left_corner[0] + main_to_side_padding;
side_right_corner[1] = border_padding;
side_width = room_width * 1/3 - border_padding * 2;
side_height = room_height - border_padding * 2;
side_left_corner[0] = side_right_corner[0] + side_width;
side_left_corner[1] = side_right_corner[1] + side_height;
side_border_radius = main_border_radius;
side_left = side_right_corner[0] + 64;
side_vcenter = mean(side_right_corner[1], side_left_corner[1]);

//bottom box
bottom_right_corner[0] = border_padding;
bottom_right_corner[1] = main_left_corner[1] + main_to_bottom_padding;
bottom_width = room_width * 2/3 - bottom_right_corner[0];
bottom_height = side_left_corner[1] - bottom_right_corner[1];
bottom_left_corner[0] = bottom_right_corner[0] + bottom_width;
bottom_left_corner[1] = bottom_right_corner[1] + bottom_height;
bottom_border_radius = main_border_radius;

//slots
slot_width = 64;
slot_height = 64;
slot_padding = 16;
slot_hborder_padding = 3;
slot_vborder_padding = 5;
slot_border_radius = 5;
side_slot_hborder_padding = 52;
side_slot_vborder_padding = 1/2 * mean(side_right_corner[1], side_left_corner[1]) + string_height('1') * global.textScale * 2;

//rows and cols of inventory slots
num_row = floor(main_width / (slot_width + slot_padding));
num_col = floor(main_height / (slot_height + slot_padding));

//actual inventory grid
global.max_items = num_row * num_col;
//name, type, desc, cost, object ID, stat/effect, amount
item_params = 7;
global.inventory_grid = ds_grid_create(global.max_items, item_params); 

//equips
equipInit = false;
//equip grid
//hat, shirt, weapon, off-hand, pants, shoes
global.max_equips = 6;
global.equip_grid = ds_grid_create(global.max_equips, item_params);
equip_initialize();
global.equipList = ds_list_create();

//text
textScale = 0.15;
largeTextHeight = string_height('1') * global.textScale;
smallTextHeight = string_height('1') * textScale;

//for debugging purposes
inventory_initialize();
inventory_add("Stone Sword", 1);
inventory_add("Health Pot", 1);
inventory_add("Spitoon Hat", 1);
//load_inventory();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create equip placeholders in the equip slots
if !equipInit &amp;&amp; room == rm_inventory {
    for (var i = 1; i &lt;= 3 ; i++) {
        //gets the object id
        var obj = asset_get_index(string(ds_grid_get(global.equip_grid, i, 4)));     
        
        var inst = instance_create(mean(side_slot_hborder_padding + side_right_corner[0] + (slot_padding * i) + (slot_width * (i - 1)), side_slot_hborder_padding + side_right_corner[0] + (slot_padding + slot_width) * i),
        mean(side_slot_vborder_padding + side_right_corner[1] + (slot_padding * 1) + (slot_height * (1 - 1)), side_slot_vborder_padding + side_right_corner[1] + (slot_padding + slot_height) * 1),
        obj);
        ds_list_add(global.equipList, inst);
    }
    for (var i = 1; i &lt;= 3 ; i++) {
        //gets the object id
        var obj = asset_get_index(string(ds_grid_get(global.inventory_grid, i + 3, 4)));     
        
        var inst = instance_create(mean(side_slot_hborder_padding + side_right_corner[0] + (slot_padding * i) + (slot_width * (i - 1)), side_slot_hborder_padding + side_right_corner[0] + (slot_padding + slot_width) * i),
        mean(side_slot_vborder_padding + side_right_corner[1] + (slot_padding * 2) + (slot_height * (2 - 1)), side_slot_vborder_padding + side_right_corner[1] + (slot_padding + slot_height) * 2),
        obj);
        ds_list_add(global.equipList, inst);
    }
    equipInit = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//prints the item description
if global.curInvSelect != noone {
    desc = ds_grid_get(global.inventory_grid, global.curInvSelect, 2);
    if is_string(desc) {
        descLen = string_length(desc);
        
        while strPos &lt;= descLen {
            nextChar = string_char_at(desc, strPos);
            
            if nextChar == " " lastSpace = strPos;
            
            strDisplay += nextChar;
            
            if string_width(strDisplay) * textScale &gt; bottom_width {
                strDisplay = string_delete(strDisplay, lastSpace, descLen);
                strDisplay += "#";
                strPos = lastSpace;
            }
            
            strPos++;
        }
    }
}

//Creates the Items in the inventory
if room == rm_inventory &amp;&amp; !itemsCreated {
    for (var k = 0; k &lt; num_row; k++) {  
        //gets the object id
        var obj = asset_get_index(string(ds_grid_get(global.inventory_grid, k, 4)));      
        
        //creates the object
        if object_exists(obj) {
            var inst = instance_create(
            mean(slot_hborder_padding + main_right_corner[0] + (slot_padding * (k + 1)) + (slot_width * k), slot_hborder_padding + main_right_corner[0] + (slot_padding + slot_width) * (k + 1)),
            mean(slot_vborder_padding + main_right_corner[1] + (slot_padding * (0 + 1)) + (slot_height * 0), slot_vborder_padding + main_right_corner[1] + (slot_padding + slot_height) * (0 + 1)),
            obj);
            if ds_exists(global.itemDisplayList, ds_type_list) ds_list_add(global.itemDisplayList, inst);
        }
    }
    for (var k = 0; k &lt; num_row; k++) {  
        //gets the object id
        var obj = asset_get_index(string(ds_grid_get(global.inventory_grid, k + num_row, 4)));      
        
        //creates the object
        if object_exists(obj) {
            var inst = instance_create(
            mean(slot_hborder_padding + main_right_corner[0] + (slot_padding * (k + 1)) + (slot_width * k), slot_hborder_padding + main_right_corner[0] + (slot_padding + slot_width) * (k + 1)),
            mean(slot_vborder_padding + main_right_corner[1] + (slot_padding * (1 + 1)) + (slot_height * 1), slot_vborder_padding + main_right_corner[1] + (slot_padding + slot_height) * (1 + 1)),
            obj);
            if ds_exists(global.itemDisplayList, ds_type_list) ds_list_add(global.itemDisplayList, inst);
        }
    }
    for (var k = 0; k &lt; num_row; k++) {  
        //gets the object id
        var obj = asset_get_index(string(ds_grid_get(global.inventory_grid, k + num_row * 2, 4)));      
        
        //creates the object
        if object_exists(obj) {
            var inst = instance_create(
            mean(slot_hborder_padding + main_right_corner[0] + (slot_padding * (k + 1)) + (slot_width * k), slot_hborder_padding + main_right_corner[0] + (slot_padding + slot_width) * (k + 1)),
            mean(slot_vborder_padding + main_right_corner[1] + (slot_padding * (2 + 1)) + (slot_height * 2), slot_vborder_padding + main_right_corner[1] + (slot_padding + slot_height) * (2 + 1)),
            obj);
            if ds_exists(global.itemDisplayList, ds_type_list) ds_list_add(global.itemDisplayList, inst);
        }
    }
    for (var k = 0; k &lt; num_row; k++) {  
        //gets the object id
        var obj = asset_get_index(string(ds_grid_get(global.inventory_grid, k + num_row * 3, 4)));      
        
        //creates the object
        if object_exists(obj) {
            var inst = instance_create(
            mean(slot_hborder_padding + main_right_corner[0] + (slot_padding * (k + 1)) + (slot_width * k), slot_hborder_padding + main_right_corner[0] + (slot_padding + slot_width) * (k + 1)),
            mean(slot_vborder_padding + main_right_corner[1] + (slot_padding * (3 + 1)) + (slot_height * 3), slot_vborder_padding + main_right_corner[1] + (slot_padding + slot_height) * (3 + 1)),
            obj);
            if ds_exists(global.itemDisplayList, ds_type_list) ds_list_add(global.itemDisplayList, inst);
        }
    }
    for (var k = 0; k &lt; num_row; k++) {  
        //gets the object id
        var obj = asset_get_index(string(ds_grid_get(global.inventory_grid, k + num_row * 4, 4)));      
        
        //creates the object
        if object_exists(obj) {
            var inst = instance_create(
            mean(slot_hborder_padding + main_right_corner[0] + (slot_padding * (k + 1)) + (slot_width * k), slot_hborder_padding + main_right_corner[0] + (slot_padding + slot_width) * (k + 1)),
            mean(slot_vborder_padding + main_right_corner[1] + (slot_padding * (4 + 1)) + (slot_height * 4), slot_vborder_padding + main_right_corner[1] + (slot_padding + slot_height) * (4 + 1)),
            obj);
            if ds_exists(global.itemDisplayList, ds_type_list) ds_list_add(global.itemDisplayList, inst);
        }
    }
    for (var k = 0; k &lt; num_row; k++) {  
        //gets the object id
        var obj = asset_get_index(string(ds_grid_get(global.inventory_grid, k + num_row * 5, 4)));      
        
        //creates the object
        if object_exists(obj) {
            var inst = instance_create(
            mean(slot_hborder_padding + main_right_corner[0] + (slot_padding * (k + 1)) + (slot_width * k), slot_hborder_padding + main_right_corner[0] + (slot_padding + slot_width) * (k + 1)),
            mean(slot_vborder_padding + main_right_corner[1] + (slot_padding * (5 + 1)) + (slot_height * 5), slot_vborder_padding + main_right_corner[1] + (slot_padding + slot_height) * (5 + 1)),
            obj);
            if ds_exists(global.itemDisplayList, ds_type_list) ds_list_add(global.itemDisplayList, inst);
        }
    }
    
    itemsCreated = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>itemsCreated = false;
equipInit = false;
ds_list_clear(global.itemDisplayList);
ds_list_clear(global.equipList);
//ds_grid_destroy(display_grid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup
inventory_cleanup();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draws the inventory
if room == rm_inventory {
    //background panel
    draw_set_color(c_dkgray);
    draw_roundrect_ext(main_right_corner[0], main_right_corner[1], main_left_corner[0], 
    main_left_corner[1], main_border_radius, main_border_radius, false);
    
    //side panel
    draw_roundrect_ext(side_right_corner[0], side_right_corner[1], side_left_corner[0], 
    side_left_corner[1], side_border_radius, side_border_radius, false);
    
    //bottom panel
    draw_roundrect_ext(bottom_right_corner[0], bottom_right_corner[1], bottom_left_corner[0],
    bottom_left_corner[1], bottom_border_radius, bottom_border_radius, false);
    
    //draws the inventory slots
    draw_set_color(c_gray);
    for (var i = 1; i &lt;= num_row; i++) {
        for (var j = 1; j &lt;= num_col; j++) {
            draw_roundrect_ext(slot_hborder_padding + main_right_corner[0] + (slot_padding * i) + (slot_width * (i - 1)), 
            slot_vborder_padding + main_right_corner[1] + (slot_padding * j) + (slot_height * (j - 1)),
            slot_hborder_padding + main_right_corner[0] + (slot_padding + slot_width) * i, 
            slot_vborder_padding + main_right_corner[1] + (slot_padding + slot_height) * j,
            slot_border_radius, slot_border_radius, false);
        }
    }
    
    //draws the character's name
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_text_transformed(mean(side_right_corner[0], side_left_corner[0]), side_right_corner[1] + 64, "Flan", global.textScale, 
    global.textScale, 0);
    
    //draws the character
    draw_sprite_ext(spr_player, 0, mean(side_right_corner[0], side_left_corner[0]), 
    1/2 * side_vcenter + largeTextHeight, 4, 4, 0, image_blend, 1);
    
    //draws the character's stats
    draw_set_color(c_white);
    draw_set_halign(fa_left);
    draw_text_transformed(side_left, side_right_corner[1] + side_vcenter + largeTextHeight * 3, 
    "Attack: " + string(data_player.atk), textScale, textScale, 0);
    draw_text_transformed(side_left, side_right_corner[1] + side_vcenter + largeTextHeight * 3 + smallTextHeight, 
    "Defense: " + string(data_player.def), textScale, textScale, 0);
    draw_text_transformed(side_left, side_right_corner[1] + side_vcenter + largeTextHeight * 3 + smallTextHeight * 2, 
    "Accuracy: " + string(data_player.acc), textScale, textScale, 0);
    draw_text_transformed(side_left, side_right_corner[1] + side_vcenter + largeTextHeight * 3 + smallTextHeight * 3, 
    "Speed: " + string(data_player.spd), textScale, textScale, 0);
    
    //draws equip slots
    draw_set_color(c_gray);
    for (var i = 1; i &lt;= 3 ; i++) {
        for (var j = 1; j &lt;= 2; j++) {
            draw_roundrect_ext(side_slot_hborder_padding + side_right_corner[0] + (slot_padding * i) + (slot_width * (i - 1)), 
            side_slot_vborder_padding + side_right_corner[1] + (slot_padding * j) + (slot_height * (j - 1)),
            side_slot_hborder_padding + side_right_corner[0] + (slot_padding + slot_width) * i, 
            side_slot_vborder_padding + side_right_corner[1] + (slot_padding + slot_height) * j,
            slot_border_radius, slot_border_radius, false);
        }
    }
    
    //draw stuff if an item is selected
    if global.curInvSelect != noone {
        
        draw_set_color(c_white);
        draw_set_halign(fa_left);
        
        //draw the name of the item
        draw_text_transformed(bottom_right_corner[0] + 16, 
        bottom_right_corner[1] + (smallTextHeight),
        ds_grid_get(global.inventory_grid, global.curInvSelect, 0), textScale, textScale, 0);
    
        //draw the item description
        draw_text_transformed(bottom_right_corner[0] + 16, 
        bottom_right_corner[1] + 2 * (smallTextHeight), 
        strDisplay, textScale, textScale, 0);
        
        //draw the item stats
        var cost = ds_grid_get(global.inventory_grid, global.curInvSelect, 3);
        var number = ds_grid_get(global.inventory_grid, global.curInvSelect, 6);
        var dist = smallTextHeight * 4;
        draw_text_transformed(bottom_right_corner[0] + 16, 
        bottom_right_corner[1] + dist, "Cost: " + string(cost), textScale, textScale, 0);
        draw_text_transformed(bottom_right_corner[0] + string_width("Cost:                      ") * textScale, 
        bottom_right_corner[1] + dist, "Amount: " + string(number), textScale, textScale, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
