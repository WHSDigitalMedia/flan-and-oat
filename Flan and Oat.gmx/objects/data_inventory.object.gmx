<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.showInventory = false;
global.curInvSelect = noone;
toggle = vk_shift;

global.max_items = 25;
item_params = 10; //[name, type, canEquip, desc, cost, id, sprite, effect], number, curEquip
global.inventory_grid = ds_grid_create(global.max_items, item_params); 

//testing stuff
inventory_add("Spitoon Hat", 1);
inventory_add("Health Pot", 3);
inventory_add("Stone Sword", 2);
load_inventory();

outputString = "";
lastSpace = 0;
strPos = 1;
strDisplay = "";

itemDisplayList = ds_list_create();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(toggle) global.showInventory = !global.showInventory;

desc = ds_grid_get(global.inventory_grid, global.curInvSelect, 3);
if is_string(desc) {
    descLen = string_length(desc);
    
    while strPos &lt;= descLen {
        nextChar = string_char_at(desc, strPos);
        
        if nextChar == " " lastSpace = strPos;
        
        strDisplay += nextChar;
        
        if string_width(strDisplay) * global.textScale &gt; 420 - 64 {
            strDisplay = string_delete(strDisplay, lastSpace, descLen);
            strDisplay += "#";
            strPos = lastSpace;
        }
        
        strPos++;
    }
}

if !global.showInventory {
    for (var i = 0; i &lt; ds_list_size(itemDisplayList); i++) {
        var objToDestroy = ds_list_find_value(itemDisplayList, i);
        if instance_exists(objToDestroy) instance_destroy(objToDestroy);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inventory_cleanup();
ds_list_destroy(itemDisplayList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.showInventory {
    /***************************************************
      All of this is really jank code, needs to be fixed / made more efficient at a future date
     ***************************************************/

    //background panel
    draw_set_color(c_dkgray);
    draw_roundrect_ext(64, 64, 96 + (6 * 32) + (6 * 64) + 64 + 32, 96 + (5 * 32) + (5 * 64) + 64 + 32, 10, 10, false);
    
    //side panel
    draw_roundrect_ext(96 + (6 * 32) + (6 * 64) + 64 + 64, 64, 96 + (6 * 32) + (6 * 64) + 64 + 64 + 420, 96 + (5 * 32) + (5 * 64) + 64 + 32, 10, 10, false);

    //draw the name of the item
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_text_transformed(96 + (6 * 32) + (6 * 64) + 64 + 64 + 210, 64 + 64, ds_grid_get(global.inventory_grid, global.curInvSelect, 0), global.textScale, global.textScale, 0);

    //draw the item description
    draw_set_halign(fa_left);
    draw_text_transformed(96 + (6 * 32) + (6 * 64) + 64 + 64 + 32, 64 + 128, strDisplay, global.textScale, global.textScale, 0);
    
    //draws the slots
    for (var i = 0; i &lt; 7; i++) {
        for (var j = 0; j &lt; 6; j++) {
            draw_set_color(c_gray);
            draw_roundrect_ext(96 + (i * 32) + (i * 64), 96 + (j * 32) + (j * 64), 96 + (i * 32) + (i * 64) + 64, 96 + (j * 32) + (j * 64) + 64, 5, 5, false);         
        }
    }

    for (var k = 0; k &lt; ds_grid_width(global.inventory_grid); k++) {  
        //gets the sprite names
        var sprName = ds_grid_get(global.inventory_grid, k, 6);
        //gets the object
        var objName = ds_grid_get(global.inventory_grid, k, 5);
        
        //finds the sprite index
        if is_string(sprName) &amp;&amp; is_string(objName) {
            var sprToCheck = asset_get_index(sprName);
            var objToCheck = asset_get_index(objName);
            if sprite_exists(sprToCheck) &amp;&amp; object_exists(objToCheck) {
                var sprWidth = sprite_get_width(sprToCheck);
                var sprHeight = sprite_get_height(sprToCheck);
                var padding = 64;
                var obj = instance_create(128 + (k * sprWidth) + (k * padding), 32 + sprHeight + padding, objToCheck);
                ds_list_add(itemDisplayList, obj);
                //draw_sprite(sprToCheck, image_index, 128 + (k * sprWidth) + (k * padding), 32 + sprHeight + padding); //draws the sprite
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
