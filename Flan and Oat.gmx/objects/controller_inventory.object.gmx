<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//room init variables
itemsCreated = false; 
equipInit = false;

//simplified version of textbox code, aligns text in real time
outputString = "";
lastSpace = 0;
strPos = 1;
strDisplay = "";

//placement -&gt; 0 = x coordinate, 1 = y coordinate
border_padding = 32;
box_padding = 16;

//main box
main_right_corner[0] = border_padding;
main_right_corner[1] = border_padding;
main_width = room_width * 2/3 - main_right_corner[0];
main_height = room_height * 0.75 - main_right_corner[1];
main_left_corner[0] = main_right_corner[0] + main_width;
main_left_corner[1] = main_right_corner[1] + main_height;
main_border_radius = 10;
main_to_side_padding = box_padding;
main_to_bottom_padding = box_padding;

//side box
side_right_corner[0] = main_left_corner[0] + main_to_side_padding;
side_right_corner[1] = border_padding;
side_width = room_width * 1/3 - border_padding * 2;
side_height = room_height - border_padding * 2;
side_left_corner[0] = side_right_corner[0] + side_width;
side_left_corner[1] = side_right_corner[1] + side_height;
side_border_radius = main_border_radius;
side_left = side_right_corner[0] + 64;
side_vcenter = mean(side_right_corner[1], side_left_corner[1]);

//bottom box
bottom_right_corner[0] = border_padding;
bottom_right_corner[1] = main_left_corner[1] + main_to_bottom_padding;
bottom_width = room_width * 2/3 - bottom_right_corner[0];
bottom_height = side_left_corner[1] - bottom_right_corner[1];
bottom_left_corner[0] = bottom_right_corner[0] + bottom_width;
bottom_left_corner[1] = bottom_right_corner[1] + bottom_height;
bottom_border_radius = main_border_radius;

//slots
slot_width = 64;
slot_height = 64;
slot_padding = 16;
slot_hborder_padding = 3;
slot_vborder_padding = 5;
slot_border_radius = 5;
side_slot_hborder_padding = 52;
side_slot_vborder_padding = 1/2 * mean(side_right_corner[1], side_left_corner[1]) + string_height('1') * global.textScale * 2;

//rows and cols of inventory slots
inv_num_row = floor(main_width / (slot_width + slot_padding));
inv_num_col = floor(main_height / (slot_height + slot_padding));

//rows and cols of equip slots
equip_num_row = 2;
equip_num_col = 3;

//text
textScale = 0.15;
largeTextHeight = string_height('1') * global.textScale;
smallTextHeight = string_height('1') * textScale;

//item types
item_type[0] = "hat";
item_type[1] = "shirt";
item_type[2] = "weapon";
item_type[3] = "offhand";
item_type[4] = "pants";
item_type[5] = "shoes";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creates the Items in the inventory
if room == rm_inventory &amp;&amp; !itemsCreated {
    for (var i = 0; i &lt; inv_num_col; i++) {
        for (var k = 0; k &lt; inv_num_row; k++) {  
            //gets the object id
            var obj = asset_get_index(string(ds_grid_get(global.inventory_grid, k + inv_num_row * i, 4)));      
            
            //creates the object
            if object_exists(obj) {
                var inst = instance_create(
                mean(slot_hborder_padding + main_right_corner[0] + (slot_padding * (k + 1)) + (slot_width * k), slot_hborder_padding + main_right_corner[0] + (slot_padding + slot_width) * (k + 1)),
                mean(slot_vborder_padding + main_right_corner[1] + (slot_padding * (i + 1)) + (slot_height * i), slot_vborder_padding + main_right_corner[1] + (slot_padding + slot_height) * (i + 1)),
                obj);
                if ds_exists(global.itemDisplayList, ds_type_list) ds_list_add(global.itemDisplayList, inst);
            }
        }
    }
    itemsCreated = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create equip placeholders in the equip slots
if !equipInit &amp;&amp; room == rm_inventory {
    for (var j = 0; j &lt; equip_num_row; j++) {
        //draws the rows
        for (var i = 0; i &lt; equip_num_col ; i++) {
            //gets the object id
            var obj = asset_get_index(string(ds_grid_get(global.equip_grid, i + equip_num_col * j, 4)));     
            
            var inst = instance_create(mean(side_slot_hborder_padding + side_right_corner[0] + (slot_padding * (i + 1)) + (slot_width * i), side_slot_hborder_padding + side_right_corner[0] + (slot_padding + slot_width) * (i + 1)),
            mean(side_slot_vborder_padding + side_right_corner[1] + (slot_padding * (j + 1)) + (slot_height * j), side_slot_vborder_padding + side_right_corner[1] + (slot_padding + slot_height) * (j + 1)),
            obj);
            ds_list_add(global.equipList, inst);
        }
    }

    //sets the types they accept
    for (var k = 0; k &lt; ds_grid_width(global.equip_grid); k++) {
        if ds_grid_get(global.equip_grid, k, 0) == "Null" ds_grid_set(global.equip_grid, k, 1, item_type[k]);
    }
    
    equipInit = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///prints the item description
if global.curInvSelect != noone || global.curEquipSelect != noone {
    if global.curInvSelect != noone desc = ds_grid_get(global.inventory_grid, global.curInvSelect, 2);
    else if global.curEquipSelect != noone desc = ds_grid_get(global.equip_grid, global.curEquipSelect, 2);
    if is_string(desc) {
        descLen = string_length(desc);
        
        while strPos &lt;= descLen {
            nextChar = string_char_at(desc, strPos);
            
            if nextChar == " " lastSpace = strPos;
            
            strDisplay += nextChar;
            
            if string_width(strDisplay) * textScale &gt; bottom_width {
                strDisplay = string_delete(strDisplay, lastSpace, descLen);
                strDisplay += "#";
                strPos = lastSpace;
            }
            
            strPos++;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>itemsCreated = false;
equipInit = false;
global.curInvSelect = noone;
global.curEquipSelect = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>room</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>rm_inventory</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draws the inventory panels and slots

//background panel
draw_set_color(c_dkgray);
draw_roundrect_ext(main_right_corner[0], main_right_corner[1], main_left_corner[0], 
main_left_corner[1], main_border_radius, main_border_radius, false);

//side panel
draw_roundrect_ext(side_right_corner[0], side_right_corner[1], side_left_corner[0], 
side_left_corner[1], side_border_radius, side_border_radius, false);

//bottom panel
draw_roundrect_ext(bottom_right_corner[0], bottom_right_corner[1], bottom_left_corner[0],
bottom_left_corner[1], bottom_border_radius, bottom_border_radius, false);

//draws the inventory slots
draw_set_color(c_gray);
for (var i = 1; i &lt;= inv_num_row; i++) {
    for (var j = 1; j &lt;= inv_num_col; j++) {
        draw_roundrect_ext(slot_hborder_padding + main_right_corner[0] + (slot_padding * i) + (slot_width * (i - 1)), 
        slot_vborder_padding + main_right_corner[1] + (slot_padding * j) + (slot_height * (j - 1)),
        slot_hborder_padding + main_right_corner[0] + (slot_padding + slot_width) * i, 
        slot_vborder_padding + main_right_corner[1] + (slot_padding + slot_height) * j,
        slot_border_radius, slot_border_radius, false);
    }
}

//draws equip slots
draw_set_color(c_gray);
for (var i = 1; i &lt;= equip_num_col ; i++) {
    for (var j = 1; j &lt;= equip_num_row; j++) {
        draw_roundrect_ext(side_slot_hborder_padding + side_right_corner[0] + (slot_padding * i) + (slot_width * (i - 1)), 
        side_slot_vborder_padding + side_right_corner[1] + (slot_padding * j) + (slot_height * (j - 1)),
        side_slot_hborder_padding + side_right_corner[0] + (slot_padding + slot_width) * i, 
        side_slot_vborder_padding + side_right_corner[1] + (slot_padding + slot_height) * j,
        slot_border_radius, slot_border_radius, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draws the character
draw_sprite_ext(spr_flan_idle, 3, mean(side_right_corner[0], side_left_corner[0]), 
1/2 * side_vcenter + largeTextHeight, 4, 4, 0, image_blend, 1);

//draws the character's name
draw_set_color(c_white);
draw_set_halign(fa_center);
draw_text_transformed(mean(side_right_corner[0], side_left_corner[0]), side_right_corner[1] + 64, "Flan", global.textScale, 
global.textScale, 0);

//draws the character's stats
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_text_transformed(side_left, side_right_corner[1] + side_vcenter + largeTextHeight * 3, 
"Attack: " + string(class_player.atk), textScale, textScale, 0);
draw_text_transformed(side_left, side_right_corner[1] + side_vcenter + largeTextHeight * 3 + smallTextHeight, 
"Defense: " + string(class_player.def), textScale, textScale, 0);
draw_text_transformed(side_left, side_right_corner[1] + side_vcenter + largeTextHeight * 3 + smallTextHeight * 2, 
"Accuracy: " + string(class_player.acc), textScale, textScale, 0);
draw_text_transformed(side_left, side_right_corner[1] + side_vcenter + largeTextHeight * 3 + smallTextHeight * 3, 
"Speed: " + string(class_player.spd), textScale, textScale, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draws item text
if global.curInvSelect != noone || global.curEquipSelect != noone {
    
    draw_set_color(c_white);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    //draw the name of the item
    var name;
    if global.curInvSelect != noone name = ds_grid_get(global.inventory_grid, global.curInvSelect, 0); 
    else if global.curEquipSelect != noone name = ds_grid_get(global.equip_grid, global.curEquipSelect, 0);
    draw_text_transformed(bottom_right_corner[0] + 16, 
    bottom_right_corner[1] + (smallTextHeight) * 0.5, name,
    textScale, textScale, 0);

    //draw the item description
    draw_text_transformed(bottom_right_corner[0] + 16, 
    bottom_right_corner[1] + 2 * (smallTextHeight), 
    strDisplay, textScale, textScale, 0);
    
    //draw the item stats
    var cost, number, raw_data, stat, effect;
    if global.curInvSelect != noone {
        cost = ds_grid_get(global.inventory_grid, global.curInvSelect, 3);
        number = ds_grid_get(global.inventory_grid, global.curInvSelect, 6);
        raw_data = ds_grid_get(global.inventory_grid, global.curInvSelect, 5);        
    } else if global.curEquipSelect != noone {
        cost = ds_grid_get(global.equip_grid, global.curEquipSelect, 3);
        number = ds_grid_get(global.equip_grid, global.curEquipSelect, 6);
        raw_data = ds_grid_get(global.equip_grid, global.curEquipSelect, 5);
    }
    stat = string_letters(raw_data);
    effect = string_digits(raw_data);
    
    //converts stat from its abbreivation to the full word(s)
    switch (stat) {
        case "atk": stat = "Attack"; break;
        case "def": stat = "Defense"; break;
        case "spd": stat = "Speed"; break;
        case "acc": stat = "Accuracy"; break;
        case "hp": stat = "Restores Hit Points"; break;
        default: break;
    }
    
    var dist = smallTextHeight * 4;
    draw_text_transformed(bottom_right_corner[0] + 16, 
    bottom_right_corner[1] + dist, "Cost: " + string(cost), textScale, textScale, 0);
    draw_text_transformed(bottom_right_corner[0] + string_width("Cost:                      ") * textScale, 
    bottom_right_corner[1] + dist, "Amount: " + string(number), textScale, textScale, 0);
    draw_text_transformed(bottom_right_corner[0] + string_width("Cost:                      ") * textScale * 2, 
    bottom_right_corner[1] + dist, stat + ": +" + effect, textScale, textScale, 0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
