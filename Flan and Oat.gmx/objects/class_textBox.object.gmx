<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initalize message
message = "error: devs suck at programming. please let them know. let them know that the uh, program failed, not that they suck. or whatever, I'm a text-box message, not a cop.#[1] alright#[2] okay#[3] no";
textSpeed = 1 / room_speed; //must be at least 0, smaller = faster, must be over room_speed
strDisplay = "";
nextChar = "";
yPos = y;

//positioning
lastSpace = 0;
strPos = 1;
line = 0;
done = false;

//pause = false;
draw_set_font(fnt_textbox);

//can be overriden
accept[0] = noone;
accept[1] = noone;
accept[2] = noone;
acceptArg[0, 0] = noone;
acceptArg[1, 0] = noone;
acceptArg[2, 0] = noone;

width = 1220; //manually overriden in the scripts
height = 240;
padding = 32;
rad = 32;

hiddenSurf = surface_create(window_get_width(), 480);
surface_set_target(hiddenSurf);
draw_surface(application_surface, 0, 0);
surface_reset_target();
hiddenSpr = sprite_create_from_surface(hiddenSurf, 0, 0, window_get_width(), 480, false, false, 0, 0);
surface_free(hiddenSurf);

/*hiddenSurfBelow = surface_create(window_get_width(), 20);
surface_set_target(hiddenSurfBelow);
draw_surface(application_surface, 0, 720);
surface_reset_target();
hiddenSprBelow = sprite_create_from_surface(hiddenSurfBelow, 0, 0, window_get_width(), 20, false, false, 0, 0);
*/
alarm_set(0, room_speed * textSpeed);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_exists(hiddenSpr) sprite_delete(hiddenSpr);
//if sprite_exists(hiddenSprBelow) sprite_delete(hiddenSprBelow);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add letters
var messageLen = string_length(message);
var strLen = string_length(strDisplay);

if strPos &lt;= messageLen { //proceed only if the message hasn't been fully parsed
    nextChar = string_char_at(message, strPos); 
    
    if nextChar == " " lastSpace = strPos; //add spaces
    
    strDisplay += nextChar; //add character to the end of the displayed string

    //check to see if the displayed string has gone over the horizontal bounds
    if string_width(strDisplay) * global.textScale &gt; width - padding * 2 {
        strDisplay = string_delete(strDisplay, lastSpace, strLen);
        strDisplay += "#";
        strPos = lastSpace;
        line++;
    }    
    
    //check to see if the displayed string will go over the vertical bounds
    if string_height(strDisplay) * global.textScale &gt; (yPos * line) + height {
        yPos -= 10;
        //pause = true;
    }
    
    strPos++;
    
    alarm_set(0, room_speed * textSpeed);
} else {
    done = true;
    alarm_set(0, -1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make a selection
if done {
    //loops through all possible values
    for (var i = 0; i &lt; array_length_1d(accept); i++) {
        if keyboard_check_pressed(ord(string(i + 1))) &amp;&amp; script_exists(accept[i]) { //checks to see if the script exists, just in case
            var argsNum = array_length_2d(acceptArg, i);
            
            switch (argsNum) {
                case 1: script_execute(accept[i], acceptArg[i, 0]); break;
                case 2: script_execute(accept[i], acceptArg[i, 0], acceptArg[i, 1]); break;
                case 3: script_execute(accept[i], acceptArg[i, 0], acceptArg[i, 1], acceptArg[i, 2]); break;
                case 4: script_execute(accept[i], acceptArg[i, 0], acceptArg[i, 1], acceptArg[i, 2], acceptArg[i, 3]); break;
                case 5: script_execute(accept[i], acceptArg[i, 0], acceptArg[i, 1], acceptArg[i, 2], acceptArg[i, 3],
                        acceptArg[i, 4]); break;
                case 6: script_execute(accept[i], acceptArg[i, 0], acceptArg[i, 1], acceptArg[i, 2], acceptArg[i, 3],
                        acceptArg[i, 4], acceptArg[i, 5]); break;
                case 7: script_execute(accept[i], acceptArg[i, 0], acceptArg[i, 1], acceptArg[i, 2], acceptArg[i, 3],
                        acceptArg[i, 4], acceptArg[i, 5], acceptArg[i, 6]); break;
                case 8: script_execute(accept[i], acceptArg[i, 0], acceptArg[i, 1], acceptArg[i, 2], acceptArg[i, 3],
                        acceptArg[i, 4], acceptArg[i, 5], acceptArg[i, 6], acceptArg[i, 7]); break;
                case 9: script_execute(accept[i], acceptArg[i, 0], acceptArg[i, 1], acceptArg[i, 2], acceptArg[i, 3],
                        acceptArg[i, 4], acceptArg[i, 5], acceptArg[i, 6], acceptArg[i, 7], acceptArg[i, 8]); break;
                case 10: script_execute(accept[i], acceptArg[i, 0], acceptArg[i, 1], acceptArg[i, 2], acceptArg[i, 3],
                        acceptArg[i, 4], acceptArg[i, 5], acceptArg[i, 6], acceptArg[i, 7], acceptArg[i, 8], acceptArg[i, 9]); break;
                case 11: script_execute(accept[i], acceptArg[i, 0], acceptArg[i, 1], acceptArg[i, 2], acceptArg[i, 3],
                        acceptArg[i, 4], acceptArg[i, 5], acceptArg[i, 6], acceptArg[i, 7], acceptArg[i, 8], acceptArg[i, 9],
                        acceptArg[i, 10]); break;
                case 12: script_execute(accept[i], acceptArg[i, 0], acceptArg[i, 1], acceptArg[i, 2], acceptArg[i, 3],
                        acceptArg[i, 4], acceptArg[i, 5], acceptArg[i, 6], acceptArg[i, 7], acceptArg[i, 8], acceptArg[i, 9],
                        acceptArg[i, 10], acceptArg[i, 11]); break;
                default: break;
                
                i = array_length_1d(accept);
            }
            class_player.allowMovement = true;
            class_player.move_speed = 0;
            instance_destroy();
        }    
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Scrollable text
if mouse_wheel_up() {
    yPos -= 10;
} else if mouse_wheel_down() {
    yPos += 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the text
var oldAlpha = draw_get_alpha();
draw_set_halign(fa_left);

draw_set_alpha(0.7);
draw_roundrect_colour_ext(x, y, x + width, y + height, rad, rad, c_gray, c_gray, false);
draw_set_alpha(oldAlpha);
draw_set_color(c_white);
draw_text_transformed(x + padding, yPos + padding, strDisplay, global.textScale, global.textScale, 0);

draw_sprite(hiddenSpr, image_index, 0, 0);
//draw_sprite(hiddenSprBelow, image_index, x, y + height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
