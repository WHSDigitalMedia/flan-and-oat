<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initalize message
init = false;
message = "error: devs suck at programming. please let them know. let them know that the uh, program failed, not that they suck. or whatever, I'm a text-box message, not a cop.#[1] alright#[2] okay#[3] no";
textSpeed = 1 / room_speed; //must be at least 0, smaller = faster, must be over room_speed
strTemp = "";
strDisplay = "";

lastSpace = 0;
lastSpaceNum = 1;
lineBreak = 0;
lineBreakNum = 1;
paraBreak = 0;
paraBreakNum = 1;
vCheck = 0;
strPos = 1;
last = false;

nextChar = "";
pause = false;
draw_set_font(fnt_textbox);

//can be overriden
accept[0] = noone;
accept[1] = noone;
accept[2] = noone;

width = window_get_width() * 0.8;
height = window_get_height() * 0.8;
padding = 32;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add letters
nextChar = string_copy(message, strPos, 1);

strDisplay += nextChar;
strPos++;

//Stop once the string is complete
if strPos &gt; strLen {
    alarm_set(0, -1);
    exit;
}

//Stop if stop reached
if is_array(paraBreak) {
    if strPos == paraBreak[paraBreakNum] {
        //get rid of the extra char
        strDisplay = string_delete(strDisplay, string_length(strDisplay), 1);
        pause = true;    
        alarm_set(0, -1);
        exit;
    }
}

alarm_set(0, room_speed * textSpeed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prerender 
if !init {    
    strLen = string_length(message);
    
    //Prerender the string
    while strPos &lt;= strLen {
        //pull characters one at a time from the original
        nextChar = string_copy(message, strPos, 1);
        
        //check for spaces
        if nextChar == " " {
            lastSpace[lastSpaceNum] = strPos;
            lastSpaceNum++;
        }
        
        //copy the character into the temp string
        strTemp += nextChar;
        strPos++;
        
        //check if the string has gone over the horizontal edge
        if string_width(strTemp) * global.textScale &gt; width - padding * 2 {
            //add line break
            strTemp = string_insert("#", strTemp, lastSpace[lastSpaceNum - 1]);
            lineBreak[lineBreakNum] = lastSpace[lastSpaceNum - 1];
            lineBreakNum++;
            //get rid of extra space (+1 becuase we added a line break in the previous line)
            strTemp = string_delete(strTemp, lastSpace[lastSpaceNum - 1] + 1, 1);
        }
        
        //check if the string has gone over the vertical edge (only once)
        if vCheck == 0 &amp;&amp; string_height(strTemp) * global.textScale &gt; height - padding vCheck = lineBreakNum - 2;
    }
    
    //Set other stuff
    if is_array(paraBreakNum) {
        while (paraBreakNum &lt; lineBreakNum - paraBreakNum * vCheck) {
            paraBreak[paraBreakNum] = lineBreak[paraBreakNum + paraBreakNum * vCheck] + 1;
            paraBreakNum++;
        }
    }
    
    //Reset Stuff
    message = strTemp;
    strLen = string_length(message);
    strPos = 1;
    paraBreakNum = 1;
    
    //Begin to render text
    alarm_set(0, room_speed * textSpeed);
    init = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Continue
if pause &amp;&amp; mouse_check_button_pressed(mb_left) {  
    if paraBreakNum == array_length_1d(paraBreak) - 1 last = true;
    //Reset stuffs
    strDisplay = "";
    if paraBreakNum &lt; array_length_1d(paraBreak) - 1 paraBreakNum++;
    //unpause and continue
    pause = false;
    alarm_set(0, room_speed * textSpeed);
} else if mouse_check_button_pressed(mb_left) &amp;&amp; !last {
    //skiperinos to the next paragraph break or end
    if paraBreakNum &lt; array_length_1d(paraBreak) {
        next = string_copy(message, strPos, paraBreak[paraBreakNum] - strPos);
        //fill out the rest
        strDisplay += next;
        strPos += string_length(next);
        pause = true;
        alarm_set(0, -1);
    } else {
        show_debug_message('the thing');
        strDisplay += string_copy(message, strPos, strLen);
        strPos = strLen + 1;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///For when it's done
if strPos &gt; strLen {
    if keyboard_check_pressed(ord("1")) || keyboard_check_pressed(ord("2")) || keyboard_check_pressed(ord("3")) {
        if keyboard_check_pressed(ord("1")) script_execute(accept[0]);
        else if keyboard_check_pressed(ord("2")) script_execute(accept[1]);
        else if keyboard_check_pressed(ord("3")) script_execute(accept[2]);
        //Reset pause
        class_player.allowMovement = true;
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the text

var oldAlpha = draw_get_alpha();
draw_set_alpha(0.7);
draw_roundrect_colour_ext(x, y, x + width, y + height, 10, 10, c_gray, c_gray, false);
draw_set_alpha(oldAlpha);
draw_text_transformed(x + padding, y + padding, strDisplay, global.textScale, global.textScale, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
