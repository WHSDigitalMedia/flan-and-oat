<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -5;
padding = 16; //extra room to cover the full item

//deadband (in pixels) to determine whether to pick up or not
mouse_deadband = 6;
init_mx = 0;
init_my = 0;

gotXY = false;
prevX = x; //to return to if dropped
prevY = y;

show_debug_message(string(x) + ", " + string(y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check if mouse over
if mouse_check_over(x - sprite_width/2 - padding, x + sprite_width/2 + padding, y - sprite_width/2 - padding, y + sprite_width/2 + padding) {
    //change the side panel display if clicked
    if mouse_check_button_pressed(mb_left) {
        //sets the inventory to display nothing if item is picked up
        with (data_inventory) {
            outputString = "";
            lastSpace = 0;
            strPos = 1;
            strDisplay = "";
        } 
        //set the currently selected item
        for (var i = 0; i &lt; ds_grid_width(global.inventory_grid); i++) {
            if object_get_name(object_index) == ds_grid_get(global.inventory_grid, i, 4) {
                global.curInvSelect = i;
                i = ds_grid_width(global.inventory_grid) + 1;
            }
        }
        init_mx = mouse_x;
        init_my = mouse_y;
    }
    
    //pickup item only if the deadband has been crossed and nothing else is picked
    var mouse_dist = point_distance(init_mx, init_my, mouse_x, mouse_y);
    if mouse_dist &gt; mouse_deadband &amp;&amp; mouse_check_button(mb_left) &amp;&amp; global.pickup == noone { 
        //get current X and Y coords to return if dropped
        if !gotXY {
            prevX = x;
            prevY = y;
            gotXY = true;
        }
        global.pickup = self; 
    } 
    
    //drop item
    if mouse_check_button_released(mb_left) &amp;&amp; global.pickup == self {
//        var inst = instance_position(x, y, class_equip);
        var to_switch = instance_place(x, y, class_item);
        //if place_empty(x, y) || string(ds_grid_get(global.inventory_grid, global.curInvSelect, 1)) == "consumable" {
        if ((mouse_x &lt; 52 || mouse_x &gt; 840) || (mouse_y &lt; 52 || mouse_y &gt; 520)) {
            if to_switch &amp;&amp; string(ds_grid_get(global.inventory_grid, global.curInvSelect, 1)) != "consumable" {
                x = to_switch.x;
                y = to_switch.y; 
                var raw_data = string(ds_grid_get(global.inventory_grid, global.curInvSelect, 5));
                var stat = string_letters(raw_data);
                var effect = real(string_digits(raw_data));
                show_debug_message(raw_data);
                show_debug_message(stat);
                show_debug_message(effect);
                
                switch (stat) {
                    case "atk": 
                        data_player.atk += effect; 
                        break;
                    case "def": 
                        data_player.def += effect; 
                        break;
                    case "spd": 
                        data_player.spd += effect; 
                        break;
                    case "acc": 
                        data_player.acc += effect; 
                        break;
                    default: break;
                }
                
                with (to_switch) instance_destroy(); //item = other.id;       
                instance_create(prevX, prevY, class_null_item);
                
                var pos = ds_list_find_index(global.equipList, to_switch);  
                ds_grid_set_grid_region(global.equip_grid, global.inventory_grid, global.curInvSelect, 0, global.curInvSelect, ds_grid_height(global.inventory_grid), pos, 0);
                
                ini_open("item_data.ini");

                ds_grid_set(global.inventory_grid, global.curInvSelect, 0, ini_read_string("Null", "name", ""));
                ds_grid_set(global.inventory_grid, global.curInvSelect, 1, ini_read_string("Null", "type", ""));
                ds_grid_set(global.inventory_grid, global.curInvSelect, 2, ini_read_string("Null", "desc", ""));
                ds_grid_set(global.inventory_grid, global.curInvSelect, 3, ini_read_real("Null", "cost", 0));
                ds_grid_set(global.inventory_grid, global.curInvSelect, 4, ini_read_string("Null", "id", ""));
                ds_grid_set(global.inventory_grid, global.curInvSelect, 5, ini_read_string("Null", "stat", ""));
                ds_grid_set(global.inventory_grid, global.curInvSelect, 6, 1);
                
                ini_close();
                
                show_debug_message(global.equip_grid);
            } else { //return to intial slot
                x = prevX;
                y = prevY;
            }
        } else {            
            if to_switch {
                inventory_switch(to_switch);
            } else {
                x = prevX;
                y = prevY;
            }
            
            /*if inst &amp;&amp; inst.item == noone {

            }*/ 
        }
        global.pickup = noone;
        gotXY = false;
    }
}

//drag items
if global.pickup == self {
    x = mouse_x;
    y = mouse_y;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

//draws an outline around the obeject if it's been picked up and being dragged
if global.curInvSelect != noone {
    var toCheck = asset_get_index(ds_grid_get(global.inventory_grid, global.curInvSelect, 4));
    if instance_exists(toCheck) {
        if object_index == toCheck.object_index {
            draw_roundrect_colour(x - sprite_width/2 - 16, y - sprite_height/2 - 16, x + sprite_width/2 + 16, y + sprite_width/2 + 16, c_white, c_white, true);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
