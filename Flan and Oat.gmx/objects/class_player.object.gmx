<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_flan_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>class_nonGUI</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create instances of necessary objects
if !instance_exists(gui_camera) instance_create(x, y, gui_camera);
if !instance_exists(controller_combat) instance_create(x, y, controller_combat);
if !instance_exists(controller_pause) instance_create(x, y, controller_pause);
if !instance_exists(controller_inventory) instance_create(x, y, controller_inventory);
if !instance_exists(data_inventory) instance_create(x, y, data_inventory);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables 
name = "Flan";

move_speed = 0;
move_speed_max = 100;
move_accel = 10;
move_friction = 7;
move_direction = 0;
allowMovement = true;
allowInput = true;
moving = 0;

movement_inputs[0] = ord("D");
movement_inputs[1] = ord("W");
movement_inputs[2] = ord("A");
movement_inputs[3] = ord("S");

room_index = room;

atk = 10;
def = 10;
spd = 10;
acc = 10;
hp = 10;
max_hp = 10;
immobile = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
if allowMovement {
    //makes sure that the movespeed is consistent across different frame rates
    var seconds_passed = delta_time/1000000;
    var move_speed_this_frame = move_speed * seconds_passed;
    
    move_xinput = 0;
    move_yinput = 0;
    move_angle = 0;
    
    //Checks for input from any of the movement keys
    for (var i = 0; i &lt; array_length_1d(movement_inputs); i++) {
        var this_key = movement_inputs[i];
        if keyboard_check(this_key) {
            move_direction = i * 90;
            move_xinput += lengthdir_x(1, move_direction);
            move_yinput += lengthdir_y(1, move_direction);
            move_speed += move_accel; //so speed builds up, not instantaneous
        }
    }
    
    //checks if the player is moving
    moving = (point_distance(0, 0, move_xinput, move_yinput) &gt; 0);
    
    //adds friction and sets a min/mzx move speed
    move_speed -= move_friction;
    move_speed = clamp(move_speed, 0, move_speed_max);
    
    //if the player's speed is greater than 0 and if input is detected
    if move_speed &amp;&amp; moving {
        move_angle = point_direction(0, 0, move_xinput, move_yinput);
        //else move_angle = move_direction; //otherwise set dir to be the last dir
        //actually do the moving
        move_step(move_speed_this_frame, move_angle, class_solid);
    } 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NPC Interaction
if distance_to_object(class_npc) &lt; 16 &amp;&amp; !instance_exists(class_textBox) &amp;&amp; !place_meeting(x, y, class_door) {
    with (instance_nearest(x, y, class_npc)) {
        player_interact = keyboard_check_pressed(ord("E"));
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation
depth = -y;
image_xscale = 1;
image_yscale = 1;
mask_index = spr_flan_up;

//if moving in overworld
if !moving {
    sprite_index = spr_flan_idle;
    image_speed = 0;
    for (var i = 0; i &lt; array_length_1d(movement_inputs); i++) {
        if keyboard_lastkey == movement_inputs[i] {
            image_index = i;
        }
    }
} else {
    image_speed = 10/room_speed;
    if keyboard_check(movement_inputs[0]) sprite_index = spr_flan_right;
    if keyboard_check(movement_inputs[2]) sprite_index = spr_flan_left;
    if keyboard_check(movement_inputs[1]) sprite_index = spr_flan_up;
    if keyboard_check(movement_inputs[3]) sprite_index = spr_flan_down;
}

//changes the sprite to just the head in the map screen
if room == rm_map {
    sprite_index = spr_flan_head;
    image_xscale = 3;
    image_yscale = 3;
}

if room == rm_combat {
    mask_index = spr_flan_idle;
    image_xscale = 2;
    image_yscale = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///updates the room index
room_index = room;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_set_halign(fa_left);
draw_set_colour(c_white);
draw_text_transformed(32, 128, "X-Input: " + string(move_xinput), global.textScale, 
    global.textScale, 0); 
draw_text_transformed(32, 128 + string_height("X") * global.textScale, 
    "Y-Input: " + string(move_yinput), global.textScale, global.textScale, 0);
draw_text_transformed(32, 128 + string_height("X") * global.textScale * 2, 
    "Direction: " + string(move_direction), global.textScale, global.textScale, 0);
draw_text_transformed(32, 128 + string_height("X") * global.textScale * 3, 
    "Angle: " + string(move_angle), global.textScale, global.textScale, 0);
draw_text_transformed(32, 128 + string_height("X") * global.textScale * 4, 
    "Moving: " + string(moving), global.textScale, global.textScale, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if room == rm_combat {
    draw_roundrect(x, y + sprite_height, x + max_hp * 5, y + sprite_height * 1.5, true);
    draw_roundrect_colour(x, y + sprite_height, x + hp * 5, y + sprite_height * 1.5, c_aqua, c_aqua, false);
    //draw_text(x, y, string(hp) + "/" + string(max_hp));
}
/*draw_text_transformed(x - 64, y, keyboard_check(ord("A")), global.textScale, 
    global.textScale, 0);
draw_text_transformed(x + 64, y, keyboard_check(ord("D")), global.textScale, 
    global.textScale, 0);
draw_text_transformed(x, y - 64, keyboard_check(ord("W")), global.textScale, 
    global.textScale, 0);
draw_text_transformed(x, y + 64, keyboard_check(ord("S")), global.textScale, 
    global.textScale, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
